#pragma kernel Update
#pragma kernel Rain

Texture2D<float4> TerrainHeightMap;
RWTexture2D<float4> WaterMap;
RWTexture2D<float4> WaterVelocityMap;
RWTexture2D<float4> Result;
RWTexture2D<float4> Test;

static float PixelSpacingInMeters = 1; //400 = width of the texture in meters | 512 = width of the texture in pixels

float GetHeight(uint2 xy)
{
    return TerrainHeightMap[xy].r + WaterMap[xy].b;
}
float GetDepth(uint2 xy)
{
    return WaterMap[xy].b;
}

void UpdateVelocity(uint2 xy, float deltaSeconds)
{
    float Gravity = 9.8f;
    float4 Velocity = float4(0, 0, 0, 0);
    float4 externalForce = 0;
    int doesPixelContainWater = GetDepth(xy) > 0;

    float4 heightDiff = float4(GetHeight(xy + uint2(1, 0)) - GetHeight(xy),
							   GetHeight(xy + uint2(0, 1)) - GetHeight(xy),
							   GetHeight(xy + uint2(-1, 0)) - GetHeight(xy),
							   GetHeight(xy + uint2(0, -1)) - GetHeight(xy));

    float4 changeInVelocity = (-Gravity / PixelSpacingInMeters) * heightDiff;
    changeInVelocity += externalForce;
    changeInVelocity *= deltaSeconds;

    WaterVelocityMap[xy] = (WaterVelocityMap[xy] + changeInVelocity) * doesPixelContainWater;
}

float Runoff(uint2 xy, uint2 offset, float velocity)
{
    if (velocity <= 0)
        return GetDepth(xy + offset) * velocity;
    else
        return GetDepth(xy) * velocity;
}

float GetChangeInDepth(uint2 xy, float deltaSeconds)
{
    float xRunoff = (Runoff(xy, uint2(1, 0), WaterVelocityMap[xy].x) - Runoff(xy, uint2(-1, 0), WaterVelocityMap[xy].z)) / PixelSpacingInMeters;
    float yRunoff = (Runoff(xy, uint2(0, 1), WaterVelocityMap[xy].y) - Runoff(xy, uint2(0, -1), WaterVelocityMap[xy].a)) / PixelSpacingInMeters;
    return -(xRunoff + yRunoff) * deltaSeconds;
}

[numthreads(8,8,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    float deltaSeconds = 1.0f/ 30.0f;
    int isOnTerrain = TerrainHeightMap[id.xy].r > 0;

    float depth = (GetDepth(id.xy) + GetChangeInDepth(id.xy, deltaSeconds)) * isOnTerrain;

    UpdateVelocity(id.xy, deltaSeconds);

    Result[id.xy] = float4(0, TerrainHeightMap[id.xy].r + depth, depth, 1);
}

[numthreads(8, 8, 1)]
void Rain (uint3 id : SV_DispatchThreadID)
{
	float4 s = WaterMap[id.xy];
	s.b += 0.1f;
	WaterMap[id.xy] = s;
}