#pragma kernel Update
#pragma kernel Rain
#pragma kernel SuppressHighFrequencies

Texture2D<float4> TerrainHeightMap;
Texture2D<float4> WaterSourceMap;
RWTexture2D<float4> WaterMap;
RWTexture2D<float4> Result;

static float MaxHeight = 200.0f;
static float WidthInMeters = 400.0f;
static float WidthInPixels = 512.0f;

static float GridSpacing = WidthInMeters / WidthInPixels;
static float SimulationSpeed = 1.0f / 50.0f; //speed in time steps per second. 1 = seconds | 50 = steps.  this is the speed of FixedUpdate
static float Gravity = 9.8f;

static float AmplitudeDampening = 0.5f;
static float VelocityDampening = 2.0f;

static float Eps = 0.00001f;

// Accesors

float GetTerrainHeight(int2 xy)
{
	uint2 pos = clamp(xy, 0, 511);
	return TerrainHeightMap[pos].r * MaxHeight;
}
float GetWaterSouceDepth(int2 xy)
{
	uint2 pos = clamp(xy, 0, 511);
	float height = WaterSourceMap[pos].r * MaxHeight;
	return clamp(height - GetTerrainHeight(xy), 0, MaxHeight);
}
float GetHeight(int2 xy)
{
	uint2 pos = clamp(xy, 0, 511);
	return WaterMap[pos].a;
}
float GetDepth(int2 xy)
{
	uint2 pos = clamp(xy, 0, 511);
    return WaterMap[pos].b;
}
float2 GetVelocity(int2 xy) 
{
	uint2 pos = clamp(xy, 0, 511);
    return WaterMap[pos].rg;
}
float GetVelocityFace(int2 xy, int2 offset)
{
	if (offset.x == 1) {
		return GetVelocity(xy).x;
	}else if (offset.y == 1) {
		return GetVelocity(xy).y;
	}else if (offset.x == -1) {
		return GetVelocity(xy + offset).x;
	}else if (offset.y == -1) {
		return GetVelocity(xy + offset).y;
	}else {
		return 0;
	}
}

// Velocity

int ShouldPerserveVelocity(int2 xy, int2 offset)
{
	int isReflective = (GetDepth(xy) <= Eps && GetTerrainHeight(xy) > GetHeight(xy + offset)) ||
					   (GetDepth(xy + offset) <= Eps && GetTerrainHeight(xy + offset) > GetHeight(xy));
	int isEdge = (xy + offset).x < 0 || (xy + offset).x >= 512 ||
			     (xy + offset).y < 0 || (xy + offset).y >= 512;
	return !isReflective && !isEdge;
}
float2 GetNewVelocity(int2 xy)
{
	float2 externalForce = 0;

    float2 neighborHeights = float2(GetHeight(xy + int2(1, 0)), GetHeight(xy + int2(0, 1)));
	float2 heightDiffs = neighborHeights - GetHeight(xy);

	float relativeGravity = -Gravity / GridSpacing;
	float2 changeInVelocity = (relativeGravity * heightDiffs + externalForce) * SimulationSpeed;
	
	int2 shouldPerserveVelocity = int2(ShouldPerserveVelocity(xy, int2(1, 0)), ShouldPerserveVelocity(xy, int2(0, 1)));
	float2 newVelocity = (GetVelocity(xy) + changeInVelocity) * shouldPerserveVelocity;

	float maxVelocity = (GridSpacing / SimulationSpeed) / VelocityDampening;
	return clamp(newVelocity, -maxVelocity, maxVelocity);
}

// Height

float UpwindDepth(int2 xy, int2 offset)
{
	int dir = dot(offset, int2(1,1));
	if (GetVelocityFace(xy, offset) * dir <= 0)
		return GetDepth(xy + offset);
    else
		return GetDepth(xy);
}
float StabilizedUpwind(int2 xy, int2 offset)
{
	float averageMaxDepth = (GridSpacing / (Gravity * SimulationSpeed)) / AmplitudeDampening;
	float averageUpwind = (UpwindDepth(xy, int2( 1,  0)) +
						   UpwindDepth(xy, int2( 0,  1)) +
						   UpwindDepth(xy, int2(-1,  0)) +
						   UpwindDepth(xy, int2( 0, -1))) / 4;
	float adjacentDepth = max(0, (averageUpwind - averageMaxDepth));
	return UpwindDepth(xy, offset) - adjacentDepth;
}
float Runoff(int2 xy, int2 offset)
{
	float runoff = StabilizedUpwind(xy, offset) * GetVelocityFace(xy, offset);
	return runoff;
}
float GetChangeInDepth(int2 xy)
{
	float xRunoff = (Runoff(xy, int2(1, 0)) - Runoff(xy, int2(-1, 0))) / GridSpacing;
    float yRunoff = (Runoff(xy, int2(0, 1)) - Runoff(xy, int2(0, -1))) / GridSpacing;

    return -(xRunoff + yRunoff) * SimulationSpeed;
}
float GetNewDepth(int2 xy)
{
	float terrainHeight = GetTerrainHeight(xy);
    int isOnTerrain = terrainHeight > 0;
	float newDepth = GetDepth(xy) + GetChangeInDepth(xy);
	float clampedDepth = clamp(newDepth * isOnTerrain, GetWaterSouceDepth(xy), MaxHeight - terrainHeight);
	return clampedDepth;
}

// High Frequency Suppression

float EdgeSuppression(int2 xy, int2 offset) {
	float maxEdge = 0.5f * GridSpacing;
	float suppressionRation = 0.25f;

	float myHeight = GetHeight(xy);
	float edgeHeight = GetHeight(xy + offset);
	float oppositeEdgeHeight = GetHeight(xy + (offset * -1));

	float myDepth = GetDepth(xy);
	float edgeDepth = GetDepth(xy + offset);

	if (myHeight - oppositeEdgeHeight > maxEdge && myHeight > edgeHeight) {
		float avgDepth = (myDepth + edgeDepth) / 2.0f;
		return suppressionRation * (max(0,avgDepth) - myDepth);
	}
	else {
		return 0.0f;
	}
}
float HighFrequencySuppression(int2 xy) {

	return EdgeSuppression(xy, int2(-1, 0)) + EdgeSuppression(xy, int2(1, 0)) +
		EdgeSuppression(xy, int2(0, -1)) + EdgeSuppression(xy, int2(0, 1));
}

// Kernels

[numthreads(8,8,1)]
void Update (uint3 id : SV_DispatchThreadID)
{ 
    float depth = GetNewDepth(id.xy);
	float terrainHeight = GetTerrainHeight(id.xy);
	float height = GetTerrainHeight(id.xy) + depth;
    float2 velocity = GetNewVelocity(id.xy);

    Result[id.xy] = float4(velocity, depth, height);
}

[numthreads(8, 8, 1)]
void SuppressHighFrequencies(uint3 id : SV_DispatchThreadID)
{
	//This does not conserve mass :(
	float4 rtn = WaterMap[id.xy]; 
	float hfs = HighFrequencySuppression(id.xy);
	rtn.b += hfs;
	rtn.a += hfs;
	WaterMap[id.xy] = rtn;
}


float RainDepthInMeters;

[numthreads(8, 8, 1)]
void Rain (uint3 id : SV_DispatchThreadID)
{
	float4 s = WaterMap[id.xy];
	s.b += RainDepthInMeters;
	WaterMap[id.xy] = s;
}