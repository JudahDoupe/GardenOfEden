#pragma kernel UpdateSoil

RWTexture2D<float4> LandMap;
RWTexture2D<float4> SoilWaterMap;
RWTexture2D<float4> WaterMap;
RWTexture2D<float4> Result;

float RootPullSpeed;
float WaterAbsorptionRate;

static float MaxHeight = 200.0f; 
static float WidthInMeters = 400.0f;
static float WidthInPixels = 512.0f;

static float GridSpacing = WidthInMeters / WidthInPixels;
static float SimulationSpeed = 1.0f / 50.0f; //speed in time steps per second. 1 = seconds | 50 = steps.  this is the speed of FixedUpdate
static float Eps = 0.00001f;
static float Gravity = 3.2f;
static float AmplitudeDampening = 0.5f;
static float VelocityDampening = 10.0f;

struct RootData
{
    float2 uv;  
    float radius;
    float depth;
    int id;
    float absorbedWater;
};
StructuredBuffer<RootData> RootBuffer;
int NumRoots;

/*
*   Land Map:
* R = Soil Depth
* G = Root Depth
* B = 
* A = Land Height
*
*   Soil Water Map:
* R = X Velocity
* G = Y Velocity
* B = Water Depth
* A = Water Height
*/

float GetSoilDepth(int2 xy)
{
    uint2 pos = clamp(xy, 0, 511);
    return LandMap[pos].r;
}
float GetLandHeight(int2 xy)
{
    uint2 pos = clamp(xy, 0, 511);
    return LandMap[pos].a;
}
float GetBedrockHeight(int2 xy)
{
    uint2 pos = clamp(xy, 0, 511);
    return LandMap[pos].a - LandMap[pos].r;
}
float GetWaterDepth(int2 xy)
{
    uint2 pos = clamp(xy, 0, 511);
    return SoilWaterMap[pos].b;
}
float GetWaterHeight(int2 xy)
{
    uint2 pos = clamp(xy, 0, 511);
    return SoilWaterMap[pos].a;
}
float2 GetWaterVelocity(int2 xy)
{
    uint2 pos = clamp(xy, 0, 511);
    return SoilWaterMap[pos].rg;
}
float GetVelocityFace(int2 xy, int2 offset)
{
    if (offset.x == 1){
        return GetWaterVelocity(xy).x;
    }else if (offset.y == 1){
        return GetWaterVelocity(xy).y;
    }else if (offset.x == -1){
        return GetWaterVelocity(xy + offset).x;
    }else if (offset.y == -1){
        return GetWaterVelocity(xy + offset).y;
    }else{
        return 0;
    }
}


float DownwindCapacity(int2 xy, int2 offset)
{
    int dir = dot(offset, int2(1, 1));
    if (GetVelocityFace(xy, offset) * dir > 0)
        return GetSoilDepth(xy + offset) - GetWaterDepth(xy + offset);
    else
        return GetSoilDepth(xy) - GetWaterDepth(xy);
}
float UpwindDepth(int2 xy, int2 offset)
{
    int dir = dot(offset, int2(1, 1));
    if (GetVelocityFace(xy, offset) * dir <= 0)
        return GetWaterDepth(xy + offset);
    else
        return GetWaterDepth(xy);
}
float Runoff(int2 xy, int2 offset)
{
    float stabilizedUpwindDepth = min(UpwindDepth(xy, offset), DownwindCapacity(xy, offset));
    float runoff = stabilizedUpwindDepth * GetVelocityFace(xy, offset);
    return runoff;
}
float GetChangeInDepth(int2 xy)
{
    float xRunoff = (Runoff(xy, int2(1, 0)) - Runoff(xy, int2(-1, 0))) / GridSpacing;
    float yRunoff = (Runoff(xy, int2(0, 1)) - Runoff(xy, int2(0, -1))) / GridSpacing;

    return -(xRunoff + yRunoff) * SimulationSpeed;
}

float TranferWaterBetweenWaterMap(int2 xy, float waterDepth)
{
    float excessWater = waterDepth - GetSoilDepth(xy);
    if (excessWater > 0)
    {
        WaterMap[xy] += float4(0, 0, excessWater, excessWater);
        waterDepth -= excessWater;
    }
    else
    {
        float requestedWater = min(-excessWater, WaterAbsorptionRate);
        float availableWater = min(WaterMap[xy].b, requestedWater);
        float absorpedWater = min(requestedWater, availableWater);
        WaterMap[xy] -= float4(0, 0, absorpedWater, absorpedWater);
        waterDepth += absorpedWater;
    }
    AllMemoryBarrierWithGroupSync();
    return waterDepth;
}

//Water Velocity

float3 GetRootData(int2 xy)
{
    float2 cellXy = float2(xy.x, xy.y);
    float2 sumWaterDirection = float2(0, 0);
    float sumRootDepth = 0;
    
    for (int i = 0; i < NumRoots; i++)
    {
        float2 rootXy = RootBuffer[i].uv * WidthInPixels;
        float dist = distance(cellXy, rootXy);
        float rootDepth = smoothstep(RootBuffer[i].radius, 0, dist) * RootBuffer[i].depth;
        sumRootDepth += rootDepth;
        sumWaterDirection += ((rootXy - cellXy) / dist) * rootDepth * RootPullSpeed;
    }
    
    float2 waterVelocity = sumWaterDirection / NumRoots;
    
    return float3(waterVelocity, sumRootDepth);
}
int ShouldPerserveVelocity(int2 xy, int2 offset)
{
    int isReflective = (GetWaterDepth(xy) <= Eps && GetBedrockHeight(xy) > GetWaterHeight(xy + offset)) ||
					   (GetWaterDepth(xy + offset) <= Eps && GetBedrockHeight(xy + offset) > GetWaterHeight(xy));
    return !isReflective;
}
float2 GetNewVelocity(int2 xy)
{
    float2 externalForce = 0;

    float2 neighborHeights = float2(GetWaterHeight(xy + int2(1, 0)), GetWaterHeight(xy + int2(0, 1)));
    float2 neighborDepths = float2(GetWaterDepth(xy + int2(1, 0)), GetWaterDepth(xy + int2(0, 1)));
    float2 heightDiffs = neighborHeights - GetWaterHeight(xy);
    float2 depthDiffs = neighborDepths - GetWaterDepth(xy);
    float2 diff = lerp(heightDiffs, depthDiffs, 0.7);

    float relativeGravity = -Gravity / GridSpacing;
    float2 changeInVelocity = (relativeGravity * diff + externalForce) * SimulationSpeed;
	
    int2 shouldPerserveVelocity = int2(ShouldPerserveVelocity(xy, int2(1, 0)), ShouldPerserveVelocity(xy, int2(0, 1)));
    float2 newVelocity = (GetWaterVelocity(xy) + changeInVelocity) * shouldPerserveVelocity;

    float maxVelocity = (GridSpacing / SimulationSpeed) / VelocityDampening;
    return clamp(newVelocity, -maxVelocity, maxVelocity);
}

// High Frequency Suppression

float EdgeSuppression(int2 xy, int2 offset)
{
    float maxEdge = 0.5f * GridSpacing;
    float suppressionRation = 0.25f;

    float myHeight = GetWaterHeight(xy);
    float edgeHeight = GetWaterHeight(xy + offset);
    float oppositeEdgeHeight = GetWaterHeight(xy + (offset * -1));

    float myDepth = GetWaterDepth(xy);
    float edgeDepth = GetWaterDepth(xy + offset);

    if (myHeight - oppositeEdgeHeight > maxEdge && myHeight > edgeHeight)
    {
        float avgDepth = (myDepth + edgeDepth) / 2.0f;
        return suppressionRation * (max(0, avgDepth) - myDepth);
    }
    else
    {
        return 0.0f;
    }
}
float HighFrequencySuppression(int2 xy)
{

    return EdgeSuppression(xy, int2(-1, 0)) + EdgeSuppression(xy, int2(1, 0)) +
		EdgeSuppression(xy, int2(0, -1)) + EdgeSuppression(xy, int2(0, 1));
}

[numthreads(8, 8, 1)]
void UpdateSoil(uint3 id : SV_DispatchThreadID)
{
    float3 rootData = GetRootData(id.xy);
	float soilDepth = GetSoilDepth(id.xy);
    float rootDepth = rootData.z;
    float waterDepth = GetWaterDepth(id.xy) + GetChangeInDepth(id.xy);
    AllMemoryBarrierWithGroupSync();
    waterDepth += HighFrequencySuppression(id.xy);
    float2 waterVelocity = rootData.xy + GetNewVelocity(id.xy);
	float landHeight = GetLandHeight(id.xy);
	float waterHeight = landHeight - soilDepth + waterDepth;

    waterDepth = TranferWaterBetweenWaterMap(id.xy, waterDepth);
    
	SoilWaterMap[id.xy] = float4(waterVelocity.x, waterVelocity.y, waterDepth, waterHeight);
    LandMap[id.xy] = float4(soilDepth, min(rootDepth, soilDepth), 0, landHeight);
}
