#pragma kernel CSMain

Texture2D<float4> HeightMap;
Texture2D<float4> NormalMap;
Texture2D<float4> RiverMap;
Texture2D<float4> WaterMap;
RWTexture2D<float4> Result;

float4 Soak(uint2 texCoord) {
	float Offsets[11] = { -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, };
	float Weights[11][11] =
	{
		{0			,0			,0			,0			,0.000001	,0.000001	,0.000001	,0			,0			,0			,0			  },
		{0			,0			,0.000001	,0.000014	,0.000055	,0.000088	,0.000055	,0.000014	,0.000001	,0			,0			  },
		{0			,0.000001	,0.000036	,0.000362	,0.001445	,0.002289	,0.001445	,0.000362	,0.000036	,0.000001	,0			  },
		{0			,0.000014	,0.000362	,0.003672	,0.014648	,0.023204	,0.014648	,0.003672	,0.000362	,0.000014	,0			  },
		{0.000001	,0.000055	,0.001445	,0.014648	,0.058433	,0.092564	,0.058433	,0.014648	,0.001445	,0.000055	,0.000001	  },
		{0.000001	,0.000088	,0.002289	,0.023204	,0.092564	,0.146632	,0.092564	,0.023204	,0.002289	,0.000088	,0.000001	  },
		{0.000001	,0.000055	,0.001445	,0.014648	,0.058433	,0.092564	,0.058433	,0.014648	,0.001445	,0.000055	,0.000001	  },
		{0			,0.000014	,0.000362	,0.003672	,0.014648	,0.023204	,0.014648	,0.003672	,0.000362	,0.000014	,0			  },
		{0			,0.000001	,0.000036	,0.000362	,0.001445	,0.002289	,0.001445	,0.000362	,0.000036	,0.000001	,0			  },
		{0			,0			,0.000001	,0.000014	,0.000055	,0.000088	,0.000055	,0.000014	,0.000001	,0			,0			  },
		{0			,0			,0			,0			,0.000001	,0.000001	,0.000001	,0			,0			,0			,0			  }
	};

	float Depth = 0;
	float2 SamplePos;
	float width, height;
	RiverMap.GetDimensions(width, height);

	for (int x = 0; x < 11; x++)
	{
		SamplePos.x = texCoord.x + Offsets[x] % width;
		for (int y = 0; y < 11; y++)
		{
			SamplePos.y = texCoord.y + Offsets[y] % height;
			Depth += WaterMap[SamplePos.xy].x * Weights[x][y];
		}
	}

	return float4(Depth, Depth, Depth, 1);
} 

float4 RunOff(uint2 texCoord) {
	float Offsets[3] = { -1, 0, 1, };
	float Weights[3][3] =
	{
		{0.077847,	0.123317,	0.077847},
		{0.123317,	0.195346,	0.123317},
		{0.077847,	0.123317,	0.077847}
	};

	float Depth = 0;
	float2 SamplePos;
	float width, height;
	NormalMap.GetDimensions(width, height);

	for (int x = 0; x < 3; x++)
	{
		SamplePos.x = texCoord.x + Offsets[x] % width;
		for (int y = 0; y < 3; y++)
		{
			SamplePos.y = texCoord.y + Offsets[y] % height;
			float4 normal = NormalMap[SamplePos.xy];
			float2 slope = float2(normal.x, normal.z);
			float weight = -slope.x * Offsets[x] * -slope.y * Offsets[y];
			Depth += WaterMap[SamplePos.xy].x * weight;
		}
	}

	return float4(Depth, Depth, Depth, 1);
}

float4 Source(uint2 texCoord) {
	float Depth = ceil(RiverMap[texCoord].x);
	return float4(Depth, Depth, Depth, 1);
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	Result[id.xy] = Source(id.xy) + RunOff(id.xy) + Soak(id.xy);
}