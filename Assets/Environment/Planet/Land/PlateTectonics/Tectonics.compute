#pragma kernel ResetPlateThicknessMaps
#pragma kernel ResetContinentalIdMap
#pragma kernel UpdateContinentalIdMap
#pragma kernel UpdatePlateThicknessMaps
#pragma kernel UpdateHeightMap

#include "../../../../Resources/Shaders/CoordinateTransforms.hlsl"
#include "../../../../Resources/Shaders/Quaternion.hlsl"
#include "../../../../Resources/Shaders/Noise.hlsl"

RWTexture2DArray<float> ContinentalIdMap;
RWTexture2DArray<float> PlateThicknessMaps;
RWTexture2DArray<float> LandHeightMap;

struct Plate
{
    int Id;
    float4 Rotation;
    float3 Velocity;
}; 
RWStructuredBuffer<Plate> Plates;
uint NumPlates;
float InitialThickness;
float FaultLineNoise; 
float OceanFloorHeight;
float SubductionRate;
float InflationRate;
float MinThickness;
int RenderPlate;

uint3 xyz_to_xyp(float3 xyz, float4 rotation, int p) {
	uint3 xyw = xyz_to_xyw(rotate_vector(xyz, q_inverse(rotation)));
    return uint3(xyw.xy, xyw.z + (p * 6));
}
float3 xyp_to_xyz(uint3 xyp, float4 rotation) {

    uint3 xyw = uint3(xyp.xy, xyp.z % 6);
    return rotate_vector(xyw_to_xyz(xyw, OceanFloorHeight), rotation);
}

[numthreads(8, 8, 6)]
void UpdateContinentalIdMap(uint3 id : SV_DispatchThreadID)
{
	int neighbors[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    float maxThickness = 0;
	uint plateId = ContinentalIdMap[id];
    float3 xyz = xyw_to_xyz(id, OceanFloorHeight);
    
	for (int x = -1; x <= 1; x++)
	{
		for (int y = -1; y <= 1; y++)
		{
			int n = (x + 1) * 3 + (y + 1);
			int3 xyw = int3(id.x + x, id.y + y, id.z);
			neighbors[n] = ContinentalIdMap[xyw];
		}
	}
    
    for (uint p = 0; p < NumPlates; p++)
	{
		Plate plate = Plates[p];
		uint3 xyp = xyz_to_xyp(xyz, plate.Rotation, p);
		float thickness = PlateThicknessMaps[xyp];
		if (thickness > maxThickness)
		{
			for (int i = 0; i < 9; i++)
			{
				if (neighbors[i] == plate.Id)
				{
					maxThickness = thickness;
					plateId = plate.Id;
				}
			}
		}
	}

    ContinentalIdMap[id] = plateId;
}

float CalculateInflation(float preasure) { return (4 * InflationRate * preasure) - (4 * InflationRate * pow(preasure, 2)); }

[numthreads(8, 8, 6)]
void UpdatePlateThicknessMaps(uint3 id : SV_DispatchThreadID)
{
    for (uint p = 0; p < NumPlates; p++)
    {
        Plate myPlate = Plates[p];
        
		uint3 xyp = uint3(id.xy, id.z + p * 6);
        float3 xyz = xyp_to_xyz(xyp, myPlate.Rotation);
		uint3 xyw = xyz_to_xyw(xyz);
        
		float myThickness = PlateThicknessMaps[xyp];
		bool isTopPlate = ContinentalIdMap[xyw] == myPlate.Id;

        float otherThickness = 0;
        for (uint p2 = 0; p2 < NumPlates; p2++)
        {
            if (p2 == p) continue;
            Plate otherPlate = Plates[p2];
            uint3 otherXyp = xyz_to_xyp(xyz, otherPlate.Rotation, p2);
            otherThickness += PlateThicknessMaps[otherXyp];
        }
		
        float preasure = (myThickness - otherThickness) / (myThickness + otherThickness + 0.00000001f);

		float subduction = myThickness * max(-preasure, 0) * SubductionRate * !isTopPlate;
        float inflation = 0; //otherThickness * InflationRate * isTopPlate;

        myThickness = max(myThickness + inflation - subduction, 0);

		if (isTopPlate && myThickness < MinThickness)
        {
			myThickness = lerp(myThickness, MinThickness, InflationRate);
		}

        PlateThicknessMaps[xyp] = myThickness;
    }
}

[numthreads(8, 8, 6)]
void UpdateHeightMap(uint3 id : SV_DispatchThreadID)
{
    float height = OceanFloorHeight;
    int plateId = ContinentalIdMap[id] * (RenderPlate == 0) + RenderPlate * (RenderPlate != 0);

    for (int p = 0; p < NumPlates; p++)
    {
        Plate plate = Plates[p];
        float3 xyp = xyz_to_xyp(xyw_to_xyz(id, OceanFloorHeight), plate.Rotation, p);
        height += PlateThicknessMaps[xyp] * (plate.Id == plateId);
    }

    LandHeightMap[id] = height;
}

[numthreads(8, 8, 6)]
void ResetPlateThicknessMaps(uint3 id : SV_DispatchThreadID)
{
    for (uint p = 0; p < NumPlates; p++)
	{
		Plate myPlate = Plates[p];
		uint3 xyp = uint3(id.xy, id.z + p * 6);
		float3 xyz = rotate_vector(xyw_to_xyz(id, OceanFloorHeight), myPlate.Rotation);
	    xyz = xyz + noise3d(xyz, FaultLineNoise);
		float minDist = 1000000;
		int closestPlateId = 0;

		for (uint p2 = 0; p2 < NumPlates; p2++)
		{
			Plate plate = Plates[p2];
			float3 centerXyz = rotate_vector(float3(0, 0, OceanFloorHeight), plate.Rotation);

			float dist = distance(xyz, centerXyz);
			if (dist < minDist)
			{
				minDist = dist;
				closestPlateId = plate.Id;
			}
		}

		PlateThicknessMaps[xyp] = (InitialThickness + myPlate.Id) * (closestPlateId == myPlate.Id);
	}
}

[numthreads(8, 8, 6)]
void ResetContinentalIdMap(uint3 id : SV_DispatchThreadID)
{
	float maxThickness = 0;
	uint plateId = ContinentalIdMap[id];
	float3 xyz = xyw_to_xyz(id, OceanFloorHeight);
    
	for (uint p = 0; p < NumPlates; p++)
	{
		Plate plate = Plates[p];
		uint3 xyp = xyz_to_xyp(xyz, plate.Rotation, p);
		float thickness = PlateThicknessMaps[xyp];
		if (thickness > maxThickness)
		{
			maxThickness = thickness;
			plateId = plate.Id;
		}
	}

	ContinentalIdMap[id] = plateId;
}
