#pragma kernel Initialize
#pragma kernel InitializeRandom
#pragma kernel InitializeXyw
#pragma kernel InitializeUvw

#include "CoordinateTransforms.hlsl"

RWTexture2DArray<float4> Map;

float4 Values;
float Seed;
float Min;
float Max;

float random(int3 uvw, float seed)
{
    return frac(sin(dot(uvw, float3(12.9898, 78.233, 94.1678))) * 43758.5453123 * seed);
}

float nextRandom(float r)
{
    return frac(sin(r) * 43758.5453123);
}

float4 random4(int3 uvw, float seed, float min, float max)
{
    float r = random(uvw, seed);
    float g = nextRandom(r);
    float b = nextRandom(g);
    float a = nextRandom(b);
    return float4(lerp(min, max, r), lerp(min, max, g), lerp(min, max, b), lerp(min, max, a));
}

[numthreads(8, 8, 1)]
void Initialize(uint3 id : SV_DispatchThreadID)
{
    [unroll]
    for (int i = 0; i < 6; ++i)
    {
        Map[int3(id.xy, i)] = Values;
    }
}

[numthreads(8, 8, 1)]
void InitializeRandom(uint3 id : SV_DispatchThreadID)
{
    [unroll]
    for (int i = 0; i < 6; ++i)
    {
        Map[int3(id.xy, i)] = random4(int3(id.xy, i), Seed, Min, Max);
    }
}

[numthreads(8, 8, 1)]
void InitializeXyw(uint3 id : SV_DispatchThreadID)
{
    [unroll]
    for (int i = 0; i < 6; ++i)
    {
        Map[int3(id.xy, i)] = float4(int3(id.xy, i), 0);
    }
}

[numthreads(8, 8, 1)]
void InitializeUvw(uint3 id : SV_DispatchThreadID)
{
    [unroll]
    for (int i = 0; i < 6; ++i)
    {
        Map[int3(id.xy, i)] = float4(xyw_to_uvw(int3(id.xy, i)), 0);
    }
}