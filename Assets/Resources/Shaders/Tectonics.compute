#pragma kernel SetIds
#pragma kernel SetVelocities
#pragma kernel IntegrateVelocities
#include "CoordinateTransforms.hlsl"
#include "Noise.hlsl"

struct Node
{
    int Id;
    float3 Position;
    float2 Velocity;
};
RWStructuredBuffer<Node> Nodes;
RWTexture2DArray<float> ContinentalIdMap;
RWTexture2DArray<float> ContinentalHeightMap;
RWTexture2DArray<float2> ContinentalVelocityMap;
float SeaLevel;
float FaultLineNoise;

[numthreads(8,8,1)]
void SetIds (uint3 id : SV_DispatchThreadID)
{
    [unroll]
    for (int w = 0; w < 6; w++) 
    {
        int3 xyw = int3(id.xy, w);
        float3 xyz = xyw_to_xyz(xyw, SeaLevel);
        xyz = xyz + noise3d(xyz, FaultLineNoise);
        int minId = -1;
        float minDist = 100002.0f;
        float dist = 0.0f;
        for (uint i = 0; i < (int)Nodes.Length; i++)
        {
            dist = distance(Nodes[i].Position, xyz);
            if (dist < minDist) {
                minDist = dist;
                minId = Nodes[i].Id;
            }
        }
        ContinentalIdMap[xyw] = minId;
    }
}

[numthreads(8, 8, 1)]
void SetVelocities(uint3 id : SV_DispatchThreadID)
{
    [unroll]
    for (int w = 0; w < 6; w++)
    {
        int3 xyw = int3(id.xy, w);
        int plateId = round(ContinentalIdMap[xyw].r);
        float2 velocity = float2(0, 0);
        for (uint i = 0; i < (int)Nodes.Length; i++)
        {
            if (plateId == Nodes[i].Id) 
            {
                int nodeW = round(xyz_to_uvw(Nodes[i].Position).z);
                velocity = Nodes[i].Velocity;
                int rotations = get_src_rotations(nodeW, w);
                velocity = rotate_clockwise(velocity, rotations);

            }
        }
        
        ContinentalVelocityMap[xyw] = velocity;
    }
}

[numthreads(8, 8, 1)]
void IntegrateVelocities(uint3 id : SV_DispatchThreadID)
{
    [unroll]
    for (int w = 0; w < 6; w++)
    {

    }
}
