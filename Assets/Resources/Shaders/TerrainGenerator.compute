#pragma kernel Generate

#include "CoordinateTransforms.hlsl"

RWTexture2DArray<float4> LandMap;
RWTexture2DArray<float4> WaterMap;

float Seed;
float SeaLevel;
float PlateauHeight;
float Smoothness;
float Min;
float Max;

float noise(float2 uv)
{
    return frac(sin(uv.x * 27. + uv.y * 35.) * 10.);
}

float smoothNoise(float2 uv, float scale)
{
    float2 lv = smoothstep(0.,1.,frac(uv * 10. * scale));
    float2 id = floor(uv * 10. * scale);
    
    float bl = noise(id);
    float br = noise(id + float2(1,0));
    float b = lerp(bl,br,lv.x);
    
    float tl = noise(id + float2(0,1)); 
    float tr = noise(id + float2(1,1));
    float t = lerp(tl,tr,lv.x);
    
    float h = lerp(b,t,lv.y) / scale;
    return (h * (Min + Max)) - Min;
}

float layeredNoise(float2 uv)
{
    float c = 0.;
    c += smoothNoise(uv, 1.);
    c += smoothNoise(uv, 2.);
    c += smoothNoise(uv, 4.);
    return c / 2.;
}

float plateauNoise(float2 uv)
{
    float height = PlateauHeight;
    float noise = layeredNoise(uv);
    float plateau = floor(noise / height) * height + height/2.;
    float k = 1. - clamp(0.,1., (1.-abs(plateau-noise)/(height/2.))*Smoothness*Smoothness);
    float t = k-(k*(1.-k));
    float h = t * noise + (1. - t) * plateau;
    return h;
}

[numthreads(8, 8, 1)]
void Generate(uint3 id : SV_DispatchThreadID)
{
    [unroll]
    for (int i = 0; i < 6; ++i)
    {
        float3 uvw = xyw_to_uvw(int3(id.xy, i));
        float h = plateauNoise(uvw.xy);
        float w = -min(0, h);
        LandMap[int3(id.xy, i)] = float4(h,0,0,0);
        WaterMap[int3(id.xy, i)] = float4(0,0,w,0);
    }
}