#pragma kernel UpdatePlateId
#pragma kernel UpdateBreakLine
#pragma kernel BreakPlate

#include "TectonicsInclude.hlsl"

RWTexture2DArray<float> ContinentalIdMap; 
RWTexture2DArray<float> PlateThicknessMaps;

float FaultLineNoise;
float OldPlateId; 
float NewPlateId; 
float OldPlateIdx;
float NewPlateIdx;
float3 OldPlateCenter;
float3 NewPlateCenter;

[numthreads(8, 8, 6)]
void UpdatePlateId(uint3 id : SV_DispatchThreadID)
{
    float oldId = ContinentalIdMap[id] * (ContinentalIdMap[id] != OldPlateId);
    float newId = NewPlateId * (ContinentalIdMap[id] == OldPlateId);
    ContinentalIdMap[id] = oldId + newId;
}

[numthreads(8, 8, 6)]
void UpdateBreakLine(uint3 id : SV_DispatchThreadID)
{
    float3 xyz = xyw_to_xyz(id, MantleHeight);
    xyz = xyz + noise3d(xyz, FaultLineNoise);
    xyz = xyz + noise3d(xyz, FaultLineNoise / 6.35);
    xyz = xyz + noise3d(xyz, FaultLineNoise / 11.7);
    
    float oldDist = distance(xyz, OldPlateCenter);
    float newDist = distance(xyz, NewPlateCenter);

    bool shouldUpdate = ContinentalIdMap[id] == OldPlateId || ContinentalIdMap[id] == NewPlateId;
    ContinentalIdMap[id] = ContinentalIdMap[id] * !shouldUpdate
    + OldPlateId * (shouldUpdate && oldDist < newDist)
    + NewPlateId * (shouldUpdate && oldDist >= newDist);
}

[numthreads(8, 8, 6)]
void BreakPlate(uint3 id : SV_DispatchThreadID)
{
    float3 xyz = xyw_to_xyz(id, MantleHeight);
    xyz = xyz + noise3d(xyz, FaultLineNoise);
    xyz = xyz + noise3d(xyz, FaultLineNoise / 6.35);
    xyz = xyz + noise3d(xyz, FaultLineNoise / 11.7);
    
    float oldDist = distance(xyz, OldPlateCenter);
    float newDist = distance(xyz, NewPlateCenter);
    
    if (oldDist >= newDist)
    {
        uint3 oldXyp = uint3(id.x, id.y, OldPlateIdx * 6 + id.z);
        uint3 newXyp = uint3(id.x, id.y, NewPlateIdx * 6 + id.z);
        
        PlateThicknessMaps[newXyp] = PlateThicknessMaps[oldXyp];
        PlateThicknessMaps[oldXyp] = 0;
    }
}
