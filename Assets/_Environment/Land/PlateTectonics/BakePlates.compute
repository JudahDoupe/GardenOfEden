#pragma kernel StartAligningPlateThicknessMaps
#pragma kernel FinishAligningPlateThicknessMaps
#pragma kernel BakePlates

#include "TectonicsInclude.hlsl"

RWTexture2DArray<float> PlateThicknessMaps;
RWTexture2DArray<float> TmpPlateThicknessMaps;
RWTexture2DArray<float> ContinentalIdMap;
RWTexture2DArray<float> TmpContinentalIdMap;

[numthreads(8, 8, 6)]
void StartAligningPlateThicknessMaps(uint3 id : SV_DispatchThreadID)
{
    float3 xyz = xyw_to_xyz(id, MantleHeight);
	
    for (uint p = 0; p < NumPlates; p++)
    {
        Plate plate = Plates[p];
        uint3 xyp = xyz_to_xyp(xyz, p);
        uint3 xypTmp = uint3(id.xy, id.z + p * 6);
        TmpPlateThicknessMaps[xypTmp] = PlateThicknessMaps[xyp];
    }
}

[numthreads(8, 8, 6)]
void FinishAligningPlateThicknessMaps(uint3 id : SV_DispatchThreadID)
{
    for (uint p = 0; p < NumPlates; p++)
    {
        uint3 xyp = uint3(id.xy, id.z + p * 6);
        PlateThicknessMaps[xyp] = TmpPlateThicknessMaps[xyp];
    }
}

[numthreads(8, 8, 6)]
void BakePlates(uint3 id : SV_DispatchThreadID)
{
    float oldId = ContinentalIdMap[id];
    float newId = TmpContinentalIdMap[get_source_xyw(id)];
    
    uint3 oldXyp = xyw_to_xyp(id, GetPlateIdx(oldId));
    uint3 newXyp = xyw_to_xyp(id, GetPlateIdx(newId));
    
    float oldThickness = PlateThicknessMaps[oldXyp];
    float newThickness = PlateThicknessMaps[newXyp];
    
    PlateThicknessMaps[oldXyp] = newThickness;
    PlateThicknessMaps[newXyp] = oldThickness;
    ContinentalIdMap[id] = newId;
}