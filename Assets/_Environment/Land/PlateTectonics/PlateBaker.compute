#pragma kernel AlignPlateThicknessMaps
#pragma kernel BakePlates
#pragma kernel InitializeLabeling
#pragma kernel RunLabelingIteration

#include "PlateTectonicsInclude.hlsl"

RWTexture2DArray<float> PlateThicknessMaps;
RWTexture2DArray<float> TmpPlateThicknessMaps;
RWTexture2DArray<float> ContinentalIdMap;
RWTexture2DArray<float> TmpContinentalIdMap;

struct LabelData
{
    int Changed;
}; 
RWStructuredBuffer<LabelData> Label;


[numthreads(8, 8, 6)]
void AlignPlateThicknessMaps(uint3 id : SV_DispatchThreadID)
{
    float3 xyz = xyw_to_xyz(id, MantleHeight);
	
    for (uint p = 0; p < NumPlates; p++)
    {
        Plate plate = Plates[p];
        uint3 xyp = xyz_to_xyp(xyz, p);
        uint3 xypTmp = uint3(id.xy, id.z + p * 6);
        TmpPlateThicknessMaps[xypTmp] = PlateThicknessMaps[xyp];
    }
}


[numthreads(8, 8, 6)]
void BakePlates(uint3 id : SV_DispatchThreadID)
{
    float oldId = ContinentalIdMap[id];
    float newId = TmpContinentalIdMap[get_source_xyw(id)];
    
    uint3 oldXyp = xyw_to_xyp(id, GetPlateIdx(oldId));
    uint3 newXyp = xyw_to_xyp(id, GetPlateIdx(newId));
    
    float oldThickness = PlateThicknessMaps[oldXyp];
    float newThickness = PlateThicknessMaps[newXyp];
    
    PlateThicknessMaps[oldXyp] = newThickness;
    PlateThicknessMaps[newXyp] = oldThickness;
    ContinentalIdMap[id] = newId;
}

int cantor(uint a, uint b) {
   return (a + b + 1) * (a + b) / 2 + b;
}
int hash(uint3 id) {
   return cantor(id.x, cantor(id.y, id.z));
}

[numthreads(8, 8, 6)]
void InitializeLabeling(uint3 id : SV_DispatchThreadID)
{
    TmpContinentalIdMap[id] = hash(id);
}

[numthreads(8, 8, 6)]
void RunLabelingIteration(uint3 id : SV_DispatchThreadID)
{
    uint3 center = get_source_xyw(id);
    uint3 left = get_source_xyw(center + uint3(-1,0,0));
    uint3 right = get_source_xyw(center + uint3(1,0,0));
    uint3 up = get_source_xyw(center + uint3(0,1,0));
    uint3 down = get_source_xyw(center + uint3(0,-1,0));
    
    int upChanged = TmpContinentalIdMap[up] > TmpContinentalIdMap[id] && ContinentalIdMap[up] == ContinentalIdMap[center];
    TmpContinentalIdMap[id] = max(TmpContinentalIdMap[id], TmpContinentalIdMap[up] * upChanged);

    int rightChanged = TmpContinentalIdMap[right] > TmpContinentalIdMap[id] && ContinentalIdMap[right] == ContinentalIdMap[center];
    TmpContinentalIdMap[id] = max(TmpContinentalIdMap[id], TmpContinentalIdMap[right] * rightChanged);
    
    int downChanged = TmpContinentalIdMap[down] > TmpContinentalIdMap[id] && ContinentalIdMap[down] == ContinentalIdMap[center];
    TmpContinentalIdMap[id] = max(TmpContinentalIdMap[id], TmpContinentalIdMap[down] * downChanged);
    
    int leftChanged = TmpContinentalIdMap[left] > TmpContinentalIdMap[id] && ContinentalIdMap[left] == ContinentalIdMap[center];
    TmpContinentalIdMap[id] = max(TmpContinentalIdMap[id], TmpContinentalIdMap[left] * leftChanged);

    if (upChanged + rightChanged + downChanged + leftChanged > 0)
    {
        Label[0].Changed = 1;
    }
}